#!/usr/bin/python
import argparse
import ConfigParser
import random
import time
import threadpool

from common import operations
from common import utils
from monkeys import vm_monkey
from monkeys import host_monkey


def main():
    utils.init_ssl()
    parser = argparse.ArgumentParser(description='Random actor')
    parser.add_argument(
        '-p',
        '--path',
        action='store',
        help='Path of monkey config file. Default {}'.format(utils.SCHEDULAR_FILE_PATH),
        dest='path',
        default=utils.SCHEDULAR_FILE_PATH,
    )
    args = parser.parse_args()

    cf = ConfigParser.ConfigParser()
    cf.read(args.path)
    vc_ip = cf.get(utils.INFO_VC, 'opt_vc')
    vc_user = cf.get(utils.INFO_VC, 'vc_user')
    vc_pwd = cf.get(utils.INFO_VC, 'vc_pwd')
    vc = operations.get_vcenter(vc_ip, vc_user, vc_pwd)

    loop = cf.get(utils.SCH_GLOBAL, 'loop')
    loop_sleep = cf.get(utils.SCH_GLOBAL, 'loop_sleep')
    concurrency = cf.get(utils.SCH_GLOBAL, 'concurrency')

    loop_time = 1 if '' == loop else int(loop)
    sleep_time = 0 if '' == loop_sleep else int(loop_sleep)
    concurrency = 10 if '' == concurrency else int(concurrency)

    print 'Starting init resources...'
    vm_sch = vm_monkey.VMMonkey(vc, cf)
    host_sch = host_monkey.HostMonkey(vc, cf)

    for i in range(loop_time):
        request_list = []
        request_list.extend(vm_sch.planner())
        request_list.extend(host_sch.planner())
        if len(request_list) == 0:
            print 'No target items found.'
            continue
        print 'Round {} starting...'.format(i+1)
        random.shuffle(request_list)
        req_len = len(request_list)
        if req_len < concurrency:
            concurrency = req_len
        pool = threadpool.ThreadPool(concurrency)
        for req in request_list:
            pool.putRequest(req)
        pool.wait()
        print 'Sleeping for {} seconds...'.format(sleep_time)
        time.sleep(sleep_time)
        host_sch.restore(concurrency)
        vm_sch.restore(concurrency)


if __name__ == '__main__':
    main()